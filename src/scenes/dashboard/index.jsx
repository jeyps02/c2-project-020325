import { Box, Button, IconButton, MenuItem, Select, Typography, useTheme } from "@mui/material";
import { tokens } from "../../theme";
import DownloadOutlinedIcon from "@mui/icons-material/DownloadOutlined";
import Header from "../../components/Header";
import { useEffect, useState } from "react";
import { getViolationLogs } from "../../services/violationLogsService.ts";
import { getDetectionLogs } from "../../services/detectionLogsService.ts";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  BarChart,
  Bar,
} from "recharts";
import CustomDatePicker from "../../components/CustomDatePicker";
import pdfMake from 'pdfmake/build/pdfmake';
import vfs from 'pdfmake/build/vfs_fonts.js';

pdfMake.vfs = vfs;
const VIOLATION_DISPLAY_NAMES = {
  no_sleeves: "Sleeveless",
  cap: "Cap",
  shorts: "Shorts"
};

const calculatePercentageChange = (violations) => {
  const today = new Date();
  const yesterday = new Date(today);
  yesterday.setDate(yesterday.getDate() - 1);
  
  // Format dates to match your data format
  const todayStr = today.toISOString().split('T')[0];
  const yesterdayStr = yesterday.toISOString().split('T')[0];
  
  // Count violations for today and yesterday
  const todayCount = violations.filter(v => v.date === todayStr).length;
  const yesterdayCount = violations.filter(v => v.date === yesterdayStr).length;
  
  if (yesterdayCount === 0) return { percent: 0, increased: false };
  
  const percentChange = ((todayCount - yesterdayCount) / yesterdayCount) * 100;
  return {
    percent: Math.abs(Math.round(percentChange)),
    increased: percentChange > 0
  };
};

const calculateUniformPercentageChange = (detections) => {
  const today = new Date();
  const yesterday = new Date(today);
  yesterday.setDate(yesterday.getDate() - 1);
  
  const todayStr = today.toISOString().split('T')[0];
  const yesterdayStr = yesterday.toISOString().split('T')[0];
  
  const todayCount = detections.filter(d => d.date === todayStr).length;
  const yesterdayCount = detections.filter(d => d.date === yesterdayStr).length;
  
  if (yesterdayCount === 0) return { percent: 0, increased: false };
  
  const percentChange = ((todayCount - yesterdayCount) / yesterdayCount) * 100;
  return {
    percent: Math.abs(Math.round(percentChange)),
    increased: percentChange > 0
  };
};

const Dashboard = () => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  const [violations, setViolations] = useState([]);
  const [detections, setDetections] = useState([]);
  const [timeframe, setTimeframe] = useState("week");
  const [dateRange, setDateRange] = useState(() => {
    const today = new Date();
    const fromDate = new Date();
    fromDate.setDate(today.getDate() - 6); // Set to 6 days before today
    
    return {
      startDate: fromDate.toISOString().split('T')[0],
      endDate: today.toISOString().split('T')[0]
    };
  });
  const generateReport = () => {
    const docDefinition = {
      content: [
        {
          text: 'Dress Code Violations Report',
          style: 'header',
          alignment: 'center',
        },
        {
          text: `Generated on: ${new Date().toLocaleDateString()}`,
          style: 'subheader',
          alignment: 'center',
        },
        {
          text: `Generated by: ${localStorage.getItem('username')}`,
          style: 'subheader',
          alignment: 'center',
        },
        {
          text: 'Violations Chart',
          style: 'header',
        },
        {
          table: {
            widths: [100, 100, 100, 100],
            body: formatData().map((row) => [row.name, row.cap, row.shorts, row.no_sleeves]),
            header: ['Date', 'Hats/Caps', 'Inappropriate Shorts', 'Sleeveless Shirts'],
          },
        },
        {
          text: 'Violations Ratio',
          style: 'header',
        },
        {
          table: {
            widths: [100, 100], // Set the widths to numbers
            body: calculateViolationsRatio().map((row) => [row.name, row.value]),
            header: ['Type', 'Value'],
          },
        },
        {
          text: 'Most Common Violations',
          style: 'header',
        },
        {
          table: {
            widths: [100, 100], // Set the widths to numbers
            body: calculateViolationRanking().map((row) => [row.name, row.value]),
            header: ['Type', 'Value'],
          },
        },
        {
          text: 'Uniform Type Distribution',
          style: 'header',
        },
        {
          table: {
            widths: [100, 100, 100], // Set the widths to numbers
            body: calculateUniformDetections().map((row) => [row.name, row.male, row.female]),
            header: ['Type', 'Male', 'Female'],
          },
        },
      ],
      styles: {
        header: {
          fontSize: 18,
          bold: true,
          margin: [0, 0, 0, 10],
        },
        subheader: {
          fontSize: 14,
          margin: [0, 0, 0, 10],
        },
      },
    };
  
    const pdfDoc = pdfMake.createPdf(docDefinition);
    pdfDoc.download('Dress Code Violations Report.pdf');
  };
  // Add getDateRangeText function here
  const getDateRangeText = () => {
    const start = new Date(dateRange.startDate);
    const end = new Date(dateRange.endDate);
    return `${start.toLocaleDateString(undefined, { 
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    })} - ${end.toLocaleDateString(undefined, { 
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    })}`;
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [violationLogs, detectionLogs] = await Promise.all([
          getViolationLogs(),
          getDetectionLogs()
        ]);
        setViolations(violationLogs);
        setDetections(detectionLogs);
      } catch (error) {
        console.error("Error fetching logs:", error);
      }
    };
    fetchData();
  }, []);

  // Add this helper function
  const isDateInRange = (date) => {
    const checkDate = new Date(date);
    const start = new Date(dateRange.startDate);
    const end = new Date(dateRange.endDate);
    return checkDate >= start && checkDate <= end;
  };

  // Add this helper function after your existing helper functions
  const getDateInterval = (start, end) => {
    const diffTime = Math.abs(end - start);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays <= 7) return { unit: 'day', step: 1 }; // Show every day
    if (diffDays <= 31) return { unit: 'day', step: 2 }; // Show every other day
    if (diffDays <= 90) return { unit: 'week', step: 1 }; // Show weekly
    if (diffDays <= 365) return { unit: 'month', step: 1 }; // Show monthly
    return { unit: 'month', step: 3 }; // Show quarterly
  };

  // Update your formatData function
  const formatData = () => {
    const start = new Date(dateRange.startDate);
    const end = new Date(dateRange.endDate);
    const interval = getDateInterval(start, end);
    
    let dates = [];
    if (interval.unit === 'day') {
      const diffTime = Math.abs(end - start);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      
      dates = Array.from({ length: Math.ceil(diffDays / interval.step) + 1 }, (_, i) => {
        const date = new Date(start);
        date.setDate(date.getDate() + (i * interval.step));
        return {
          fullDate: date.toISOString().split('T')[0],
          display: date.toLocaleDateString(undefined, { 
            month: 'short',
            day: 'numeric'
          })
        };
      });
    } else if (interval.unit === 'week') {
      let current = new Date(start);
      while (current <= end) {
        dates.push({
          fullDate: current.toISOString().split('T')[0],
          display: `W${Math.ceil((current.getDate() + current.getDay()) / 7)} ${current.toLocaleDateString(undefined, { 
            month: 'short'
          })}`
        });
        current.setDate(current.getDate() + 7);
      }
    } else if (interval.unit === 'month') {
      let current = new Date(start.getFullYear(), start.getMonth(), 1);
      while (current <= end) {
        dates.push({
          fullDate: current.toISOString().split('T')[0],
          display: current.toLocaleDateString(undefined, { 
            month: 'short',
            year: 'numeric'
          })
        });
        current.setMonth(current.getMonth() + interval.step);
      }
    }

    const grouped = {};
    dates.forEach(date => {
      grouped[date.display] = {
        name: date.display,
        cap: 0,
        shorts: 0,
        no_sleeves: 0
      };
    });

    // Aggregate violations based on interval
    violations.forEach(v => {
      if (isDateInRange(v.date)) {
        const vDate = new Date(v.date);
        let key;
        
        if (interval.unit === 'day') {
          key = vDate.toLocaleDateString(undefined, { 
            month: 'short',
            day: 'numeric'
          });
        } else if (interval.unit === 'week') {
          key = `W${Math.ceil((vDate.getDate() + vDate.getDay()) / 7)} ${vDate.toLocaleDateString(undefined, { 
            month: 'short'
          })}`;
        } else if (interval.unit === 'month') {
          key = vDate.toLocaleDateString(undefined, { 
            month: 'short',
            year: 'numeric'
          });
        }

        if (grouped[key]) {
          if (v.violation === "cap") grouped[key].cap += 1;
          if (v.violation === "shorts") grouped[key].shorts += 1;
          if (v.violation === "no_sleeves") grouped[key].no_sleeves += 1;
        }
      }
    });

    return Object.values(grouped);
  };

  // PIE CHART
  const calculateViolationsRatio = () => {
    const filteredViolations = violations.filter(v => isDateInRange(v.date));
    const totals = filteredViolations.reduce((acc, violation) => {
      const type = violation.violation;
      acc[type] = (acc[type] || 0) + 1;
      return acc;
    }, {});

    const COLORS = ['#8884d8', '#82ca9d', '#ff6b6b'];
    
    return Object.entries(totals).map(([name, value], index) => ({
      name: VIOLATION_DISPLAY_NAMES[name] || name.charAt(0).toUpperCase() + name.slice(1),
      value,
      color: COLORS[index]
    }));
  };
  // BAR CHART
  const calculateViolationRanking = () => {
    const filteredViolations = violations.filter(v => isDateInRange(v.date));
    const totals = filteredViolations.reduce((acc, violation) => {
      const type = violation.violation;
      acc[type] = (acc[type] || 0) + 1;
      return acc;
    }, {});

    return Object.entries(totals)
      .map(([name, value]) => ({
        name: VIOLATION_DISPLAY_NAMES[name] || name.charAt(0).toUpperCase() + name.slice(1),
        value
      }))
      .sort((a, b) => b.value - a.value); // Sort by value in descending order
  };

  const calculateUniformDetections = () => {
    const filteredDetections = detections.filter(d => isDateInRange(d.date));
    // For year view, combine all detections into two categories
    if (timeframe === "year") {
      const yearTotals = {
        "PE": { name: "PE Uniform", male: 0, female: 0 },
        "Regular": { name: "Regular Uniform", male: 0, female: 0 },
        
      };

      filteredDetections.forEach(detection => {
        if (detection && detection.detection) {
          if (detection.detection.includes("Male PE")) {
            yearTotals["PE"].male++;
          } else if (detection.detection.includes("Female PE")) {
            yearTotals["PE"].female++;
          } else if (detection.detection.includes("Male Regular")) {
            yearTotals["Regular"].male++;
          } else if (detection.detection.includes("Female Regular")) {
            yearTotals["Regular"].female++;
          }
        }
      });

      return Object.values(yearTotals);
    }

    // For week and month views, keep existing logic
    const totals = {
      "PE Uniform": { name: "PE Uniform", male: 0, female: 0 },
      "Regular Uniform": { name: "Regular Uniform", male: 0, female: 0 }
    };

    filteredDetections.forEach(detection => {
      if (detection && detection.detection) {
        if (detection.detection.includes("Male PE")) {
          totals["PE Uniform"].male++;
        } else if (detection.detection.includes("Female PE")) {
          totals["PE Uniform"].female++;
        } else if (detection.detection.includes("Male Regular")) {
          totals["Regular Uniform"].male++;
        } else if (detection.detection.includes("Female Regular")) {
          totals["Regular Uniform"].female++;
        }
      }
    });

    return Object.values(totals);
  };

  return (
    <Box m="30px">
      {/* HEADER */}
      <Box display="flex" justifyContent="space-between" alignItems="center">
        <Header title="Dashboard"/>
        <Box display="flex" alignItems="center" gap="20px">
          <Box display="flex" alignItems="center" gap="20px">
            {/* From Date Picker */}
            <Box display="flex" alignItems="center">
              <Typography
                variant="body2"
                color={colors.grey[100]}
                sx={{ minWidth: '40px' }}
              >
                From:
              </Typography>
              <CustomDatePicker
                value={dateRange.startDate}
                onChange={(newDate) => setDateRange(prev => ({
                  ...prev,
                  startDate: newDate
                }))}
              />
            </Box>

            {/* To Date Picker */}
            <Box display="flex" alignItems="center">
              <Typography
                variant="body2"
                color={colors.grey[100]}
                sx={{ minWidth: '40px' }}
              >
                To:
              </Typography>
              <CustomDatePicker
                value={dateRange.endDate}
                onChange={(newDate) => setDateRange(prev => ({
                  ...prev,
                  endDate: newDate
                }))}
              />
            </Box>
          </Box>
          <Button
  sx={{
    backgroundColor: '#ffd700',
    color: colors.grey[100],
    fontSize: "14px",
    fontWeight: "bold",
    padding: "10px 20px",
    "&:hover": {
      backgroundColor: '#e6c200',
    },
  }}
  onClick={generateReport}
>
  <DownloadOutlinedIcon sx={{ mr: "10px" }} />
  Download Reports
</Button>
        </Box>
      </Box>
      {/* GRID & CHARTS */}
      <Box
        display="grid"
        gridTemplateColumns="repeat(12, 1fr)"  // Changed from 30 to 12 columns
        gridAutoRows="minmax(150px, auto)"     // Changed fixed height to minmax
        gap="10px"                             // Reduced gap
      >
        {/* VIOLATIONS LINE CHART */}
        <Box
          gridColumn="span 6"                  // Take up 8/12 columns
          gridRow="span 2"                     // Take up 2 rows
          backgroundColor={colors.grey[900]}
          p="20px"
          borderRadius="16px"
        >
          <Box display="flex" justifyContent="space-between" alignItems="center">
            <Typography variant="h3" fontWeight="bold" color={colors.grey[100]}>
              Dress Code Violations
            </Typography>
          </Box>
          <Box height="300px" mt="20px">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={formatData()} margin={{ top: 5, right: 30, left: 20, bottom: 20 }}>
                <CartesianGrid strokeDasharray="3 3" strokeOpacity={0.8} />
                <XAxis 
                  dataKey="name"
                  angle={-45}
                  textAnchor="end"
                  height={70}
                  interval={0}
                  tick={{ fontSize: 12 }}
                />
                <YAxis />
                <Tooltip 
                  formatter={(value, name) => [
                    value, 
                    VIOLATION_DISPLAY_NAMES[name] || name
                  ]} 
                />
                <Legend />
                <Line type="monotone" dataKey="cap" name="Cap" stroke="#82ca9d" />
                <Line type="monotone" dataKey="shorts" name="Shorts" stroke="#8884d8" />
                <Line type="monotone" dataKey="no_sleeves" name="Sleeveless" stroke="#ff6b6b" />
              </LineChart>
            </ResponsiveContainer>
          </Box>
        </Box>

        {/* VIOLATIONS RATIO PIE CHART */}
        <Box
          gridColumn="span 4"                  // Take up 4/12 columns
          gridRow="span 2"                     // Take up 2 rows
          backgroundColor={colors.grey[900]}
          p="20px"
          borderRadius="16px"
        >
          <Box display="flex" justifyContent="space-between" alignItems="center" flexDirection="column">
            <Box display="flex" justifyContent="space-between" alignItems="center" width="100%">
              <Typography variant="h3" fontWeight="bold" color={colors.grey[100]}>
                Violations Ratio
              </Typography>
            </Box>
            <Typography variant="subtitle2" color={colors.grey[300]}>
              {getDateRangeText()}
            </Typography>
          </Box>
          <Box height="260px" mt="25px" display="flex" flexDirection="column" alignItems="center" justifyContent="center">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={calculateViolationsRatio()}
                  cx="50%"
                  cy="55%"
                  labelLine={true}
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  outerRadius={90}
                  fill="#8884d8"
                  dataKey="value"
                  startAngle={90}
                  endAngle={-270}
                >
                  {calculateViolationsRatio().map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip 
                  formatter={(value, name) => [
                    `${value} violations`, 
                    name
                  ]} 
                />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </Box>
        </Box>
      {/* ANALYTICS CARDS */}
      <Box
        display="flex"
        flexDirection="column"
        gap="10px"
        gridColumn="span 2"
        gridRow="span 2"
      >
        {/* Violations Analytics Card */}
        <Box
          backgroundColor={colors.grey[900]}
          borderRadius="16px"
          p="20px"
          height="202px"
          display="flex"
          flexDirection="column"
          justifyContent="space-between"
        >
          <Box>
            <Typography
              variant="h3"
              fontWeight="bold"
              color={colors.grey[100]}
              mb={1}
            >
              Violations
            </Typography>
            <Typography
              variant="body2"
              color={colors.grey[300]}
            >
              Compared to yesterday
            </Typography>
          </Box>
          <Box
            alignSelf="flex-end"
          >
            {(() => {
              const change = calculatePercentageChange(violations);
              return (
                <Typography
                  sx={{
                    color: !change.increased ? '#4caf50' : '#f44336',
                    display: 'flex',
                    alignItems: 'center',
                    fontSize: '50px', 
                    fontWeight: 'bold'
                  }}
                >
                  {!change.increased ? '↓' : '↑'} {change.percent}%
                </Typography>
              );
            })()}
          </Box>
        </Box>

        {/* Compliance Analytics Card */}
        <Box
          backgroundColor={colors.grey[900]}
          borderRadius="16px"
          p="20px"
          height="202px"
          display="flex"
          flexDirection="column"
          justifyContent="space-between"
        >
          <Box>
            <Typography
              variant="h3"
              fontWeight="bold"
              color={colors.grey[100]}
              mb={1}
            >
              Compliance
            </Typography>
            <Typography
              variant="body2"
              color={colors.grey[300]}
            >
              Compared to yesterday
            </Typography>
          </Box>
          <Box
            alignSelf="flex-end"
          >
            {(() => {
              const change = calculateUniformPercentageChange(detections);
              return (
                <Typography
                  sx={{
                    color: change.increased ? '#4caf50' : '#f44336',
                    display: 'flex',
                    alignItems: 'center',
                    fontSize: '50px', 
                    fontWeight: 'bold'
                  }}
                >
                  {change.increased ? '↑' : '↓'} {change.percent}%
                </Typography>
              );
            })()}
          </Box>
        </Box>
      </Box>
        {/* MOST COMMON VIOLATIONS BAR CHART */}
        <Box
          gridColumn="span 5"                  // Take up 5/12 columns
          gridRow="span 2"                     // Take up 2 rows
          backgroundColor={colors.grey[900]}
          p="20px"
          borderRadius="16px"
        >
          <Box display="flex" justifyContent="space-between" alignItems="center" flexDirection="column">
            <Box display="flex" justifyContent="space-between" alignItems="center" width="100%">
              <Typography variant="h3" fontWeight="bold" color={colors.grey[100]}>
                Most Common Violations
              </Typography>
            </Box>
            <Typography variant="subtitle2" color={colors.grey[300]}>
              {getDateRangeText(timeframe)}
            </Typography>
          </Box>
          <Box height="260px" mt="25px">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart
                data={calculateViolationRanking()}
                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
              >
                <CartesianGrid strokeDasharray="3 3" strokeOpacity={0.8} />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip 
                  formatter={(value) => [
                    `${value} violations`, 
                    "Total"
                  ]} 
                />
                <Bar dataKey="value" fill={colors.blueAccent[500]}>
                  {calculateViolationRanking().map((entry, index) => (
                    <Cell 
                      key={`cell-${index}`} 
                      fill={index === 0 ? '#ff0000' : 
                            index === 1 ? '#ffa500' : 
                            '#ffff00'} 
                    />
                  ))}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          </Box>
        </Box>

        {/* UNIFORM DETECTIONS CHART */}
        <Box
          gridColumn="span 7"                  // Take up 7/12 columns
          gridRow="span 2"                     // Take up 2 rows
          backgroundColor={colors.grey[900]}
          p="20px"
          borderRadius="16px"
        >
          <Box display="flex" justifyContent="space-between" alignItems="center" flexDirection="column">
            <Box display="flex" justifyContent="space-between" alignItems="center" width="100%">
              <Typography variant="h3" fontWeight="bold" color={colors.grey[100]}>
                Uniform Type Distribution
              </Typography>
            </Box>
            <Typography variant="subtitle2" color={colors.grey[300]}>
              {getDateRangeText(timeframe)}
            </Typography>
          </Box>
          <Box height="260px" mt="25px">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart
                data={calculateUniformDetections()}
                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
              >
                <CartesianGrid strokeDasharray="3 3" strokeOpacity={0.8} />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip formatter={(value, name) => [`${value} detections`, name]} />
                <Legend />
                <Bar 
                  dataKey="male" 
                  name="Male" 
                  fill={colors.blueAccent[500]} 
                  stackId="a"
                />
                <Bar 
                  dataKey="female" 
                  name="Female" 
                  fill={colors.redAccent[600]} 
                  stackId="a"
                />
              </BarChart>
            </ResponsiveContainer>
          </Box>
        </Box>
      </Box>
    </Box>
  );
};

export default Dashboard;